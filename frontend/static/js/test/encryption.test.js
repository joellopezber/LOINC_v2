import { encryption } from '../utils/encryption.js';

let testRunning = false;

/**
 * Test para EncryptionService - Verifica la migraci√≥n y sincronizaci√≥n de master key
 */
async function testEncryptionService() {
    if (testRunning) {
        console.log('Test ya en ejecuci√≥n...');
        return;
    }
    testRunning = true;

    try {
        console.log('\nüß™ Iniciando diagn√≥stico de EncryptionService...');
        
        // 1. Estado inicial
        console.log('\n1Ô∏è‚É£ Estado inicial:');
        const initialMasterKey = localStorage.getItem('masterKey');
        console.log('Master key en localStorage:', initialMasterKey ? '(presente)' : '(no presente)');
        
        // 2. Inicializar servicio
        console.log('\n2Ô∏è‚É£ Inicializando servicio de encriptaci√≥n:');
        try {
            await encryption.initialize();
            console.log('‚úÖ Servicio inicializado correctamente');
        } catch (error) {
            console.error('‚ùå Error inicializando servicio:', error);
            return;
        }
        
        // 3. Verificar migraci√≥n
        console.log('\n3Ô∏è‚É£ Verificando migraci√≥n:');
        const finalMasterKey = localStorage.getItem('masterKey');
        console.log('Master key en localStorage despu√©s de inicializaci√≥n:', finalMasterKey ? '(presente)' : '(eliminada)');
        
        // 4. Probar encriptaci√≥n/desencriptaci√≥n
        console.log('\n4Ô∏è‚É£ Probando funcionalidad:');
        try {
            // Probar con datos nuevos
            const testData = 'Test de encriptaci√≥n ' + Date.now();
            console.log('Datos de prueba:', testData);
            
            const encrypted = await encryption.encrypt(testData);
            console.log('Datos encriptados:', encrypted ? '(√©xito)' : '(error)');
            
            const decrypted = await encryption.decrypt(encrypted);
            console.log('Datos desencriptados:', decrypted);
            
            if (decrypted === testData) {
                console.log('‚úÖ Encriptaci√≥n/desencriptaci√≥n exitosa');
            } else {
                console.error('‚ùå Error en encriptaci√≥n/desencriptaci√≥n');
            }

            // Probar con datos previamente encriptados (si existen)
            const oldApiKey = localStorage.getItem('openaiApiKey');
            if (oldApiKey) {
                console.log('\n5Ô∏è‚É£ Verificando compatibilidad con datos antiguos:');
                const decryptedOld = await encryption.decrypt(oldApiKey);
                console.log('Desencriptaci√≥n de API key antigua:', decryptedOld ? '(√©xito)' : '(error)');
            }
        } catch (error) {
            console.error('‚ùå Error en prueba de encriptaci√≥n:', error);
        }
        
        console.log('\n‚úÖ Diagn√≥stico completado');
    } finally {
        testRunning = false;
    }
}

// Ejecutar cuando el documento est√© listo y el WebSocket conectado
if (window.socket?.connected) {
    testEncryptionService().catch(error => {
        console.error('‚ùå Error en diagn√≥stico:', error);
    });
} else {
    window.socket.on('connect', () => {
        testEncryptionService().catch(error => {
            console.error('‚ùå Error en diagn√≥stico:', error);
        });
    });
} 
export class SearchTester {
    constructor() {
        console.log('üèóÔ∏è Inicializando SearchTester');
        this.socket = null;
        this.isConnected = false;
        this.onConnectionChange = null;
        this.onSearchResult = null;
        this.onError = null;
    }

    async connect() {
        if (this.socket?.connected) {
            console.log('üîå Ya conectado al servidor');
            return;
        }

        console.log('üîå Conectando al servidor en http://localhost:5001...');
        try {
            this.socket = io('http://localhost:5001', {
                transports: ['websocket'],
                reconnection: true,
                reconnectionAttempts: 5,
                reconnectionDelay: 1000
            });
            console.log('üîÑ Socket configurado:', this.socket);
        } catch (error) {
            console.error('‚ùå Error al crear socket:', error);
        }

        this.socket.on('connect', () => {
            console.log('‚úÖ Conectado al servidor');
            console.log('üì° ID de socket:', this.socket.id);
            this.isConnected = true;
            this.onConnectionChange?.(true);
        });

        this.socket.on('disconnect', (reason) => {
            console.log('‚ùå Desconectado del servidor. Raz√≥n:', reason);
            this.isConnected = false;
            this.onConnectionChange?.(false);
        });

        this.socket.on('connect_error', (error) => {
            console.error('‚ùå Error de conexi√≥n:', error.message);
            console.error('Stack:', error.stack);
            this.isConnected = false;
            this.onConnectionChange?.(false);
        });

        this.socket.on('search_result', (data) => {
            console.log('üì© Resultado de b√∫squeda recibido:', {
                timestamp: new Date().toISOString(),
                data: JSON.stringify(data, null, 2)
            });
            this.onSearchResult?.(data);
        });

        this.socket.on('error', (error) => {
            console.error('‚ùå Error del servidor:', {
                timestamp: new Date().toISOString(),
                message: error.message,
                details: error
            });
            this.onError?.(error);
        });

        // Monitorizar todos los eventos
        this.socket.onAny((eventName, ...args) => {
            console.log('üéØ Evento recibido:', {
                timestamp: new Date().toISOString(),
                event: eventName,
                args: args
            });
        });
    }

    async search(query) {
        if (!this.socket?.connected) {
            console.error('‚ùå Intento de b√∫squeda sin conexi√≥n');
            throw new Error('No hay conexi√≥n con el servidor');
        }

        const searchData = {
            query,
            user_id: this.socket.id,
            timestamp: new Date().toISOString()
        };

        console.log('üîç Iniciando b√∫squeda:', searchData);

        return new Promise((resolve, reject) => {
            console.log('üì§ Emitiendo evento search');
            this.socket.emit('search', searchData, (response) => {
                console.log('üì© Respuesta recibida:', {
                    timestamp: new Date().toISOString(),
                    status: response?.status,
                    response: JSON.stringify(response, null, 2)
                });

                if (response?.status === 'success') {
                    console.log('‚úÖ B√∫squeda exitosa');
                    this.onSearchResult?.(response);
                    resolve(response);
                } else {
                    console.error('‚ùå Error en b√∫squeda:', response?.message || 'Error desconocido');
                    const error = new Error(response?.message || 'Error desconocido');
                    this.onError?.(error);
                    reject(error);
                }
            });
        });
    }

    setPreferredService(service) {
        if (!this.socket?.connected) {
            console.error('‚ùå Intento de configuraci√≥n sin conexi√≥n');
            throw new Error('No hay conexi√≥n con el servidor');
        }

        console.log('‚öôÔ∏è Configurando servicio:', {
            timestamp: new Date().toISOString(),
            service: service,
            socketId: this.socket.id
        });

        return new Promise((resolve, reject) => {
            console.log('üì§ Emitiendo evento set_preferred_service');
            this.socket.emit('set_preferred_service', { service }, (response) => {
                console.log('üì© Respuesta de configuraci√≥n:', {
                    timestamp: new Date().toISOString(),
                    status: response?.status,
                    response: JSON.stringify(response, null, 2)
                });

                if (response?.status === 'success') {
                    console.log('‚úÖ Configuraci√≥n exitosa');
                    resolve(response);
                } else {
                    console.error('‚ùå Error en configuraci√≥n:', response?.message || 'Error al configurar servicio');
                    const error = new Error(response?.message || 'Error al configurar servicio');
                    this.onError?.(error);
                    reject(error);
                }
            });
        });
    }

    disconnect() {
        if (this.socket) {
            console.log('üëã Desconectando socket:', {
                timestamp: new Date().toISOString(),
                socketId: this.socket.id,
                wasConnected: this.socket.connected
            });
            this.socket.disconnect();
            this.socket = null;
        }
    }
} 
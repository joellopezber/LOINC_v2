import { websocketService } from '/static/js/services/websocket.service.js';

/**
 * Clase base para todos los testers
 * Maneja la conexi√≥n WebSocket y funcionalidad com√∫n
 */
export class BaseTester {
    constructor() {
        console.log('üîÑ Inicializando BaseTester');
        this.isConnected = false;
        this.onConnectionChange = null;
        this.onError = null;
        // Exponer websocketService para las clases hijas
        this._ws = websocketService;
    }

    async connect() {
        try {
            if (websocketService.isConnected()) {
                console.log('üîå Ya conectado al servidor');
                this.isConnected = true;
                this.onConnectionChange?.(true);
                // Solo llamar a initialize si est√° implementado
                if (this.initialize !== BaseTester.prototype.initialize) {
                    await this.initialize();
                }
                return;
            }

            console.log('üîå Conectando al servidor...');

            // Configurar handlers de conexi√≥n
            websocketService.on('connected', async () => {
                console.log('‚úÖ Conectado al servidor');
                this.isConnected = true;
                this.onConnectionChange?.(true);
                // Solo llamar a initialize si est√° implementado
                if (this.initialize !== BaseTester.prototype.initialize) {
                    await this.initialize();
                }
            });

            websocketService.on('disconnected', () => {
                console.log('‚ùå Desconectado del servidor');
                this.isConnected = false;
                this.onConnectionChange?.(false);
            });

            websocketService.on('error', (error) => {
                console.error('‚ùå Error de conexi√≥n:', error);
                this.isConnected = false;
                this.onConnectionChange?.(false);
                this.onError?.(error);
            });

            // Conectar usando websocketService
            await websocketService.connect();

        } catch (error) {
            console.error('‚ùå Error estableciendo conexi√≥n:', error);
            this.onError?.(error);
        }
    }

    // M√©todo opcional que pueden implementar las clases hijas
    async initialize() {
        // Implementaci√≥n por defecto vac√≠a
        console.log('‚ÑπÔ∏è Usando implementaci√≥n base de initialize()');
    }

    disconnect() {
        console.log('üßπ BaseTester: Limpiando recursos');
        this.isConnected = false;
        // No desconectamos websocketService ya que puede estar siendo usado por otros servicios
    }

    // M√©todo helper para logs
    log(message, isError = false) {
        const timestamp = new Date().toLocaleTimeString();
        console[isError ? 'error' : 'log'](`[${timestamp}] ${message}`);
    }
} 
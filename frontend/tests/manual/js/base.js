/**
 * Clase base para todos los testers
 * Maneja la conexi√≥n WebSocket y funcionalidad com√∫n
 */
export class BaseTester {
    constructor() {
        console.log('üîÑ Inicializando BaseTester');
        this.socket = null;
        this.isConnected = false;
        this.onConnectionChange = null;
        this.onError = null;
    }

    async connect() {
        try {
            if (this.socket?.connected) {
                console.log('üîå Ya conectado al servidor');
                return;
            }

            console.log('üîå Conectando al servidor...');
            this.socket = io('http://localhost:5001', {
                transports: ['websocket']
            });

            // Asignar socket a window para que otros servicios lo usen
            window.socket = this.socket;

            this.socket.on('connect', () => {
                console.log('‚úÖ Conectado al servidor');
                this.isConnected = true;
                this.onConnectionChange?.(true);
                // Solo llamar a initialize si est√° implementado
                if (this.initialize !== BaseTester.prototype.initialize) {
                    this.initialize();
                }
            });

            this.socket.on('disconnect', () => {
                console.log('‚ùå Desconectado del servidor');
                this.isConnected = false;
                this.onConnectionChange?.(false);
            });

            this.socket.on('connect_error', (error) => {
                console.error('‚ùå Error de conexi√≥n:', error);
                this.isConnected = false;
                this.onConnectionChange?.(false);
                this.onError?.(error);
            });

        } catch (error) {
            console.error('‚ùå Error estableciendo conexi√≥n:', error);
            this.onError?.(error);
        }
    }

    // M√©todo opcional que pueden implementar las clases hijas
    async initialize() {
        // Implementaci√≥n por defecto vac√≠a
        console.log('‚ÑπÔ∏è Usando implementaci√≥n base de initialize()');
    }

    disconnect() {
        console.log('üßπ BaseTester: Limpiando recursos');
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
        }
        this.isConnected = false;
    }

    // M√©todo helper para logs
    log(message, isError = false) {
        const timestamp = new Date().toLocaleTimeString();
        console[isError ? 'error' : 'log'](`[${timestamp}] ${message}`);
    }
} 
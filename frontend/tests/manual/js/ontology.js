export class OntologyTester {
    constructor() {
        console.log('üîÑ Inicializando OntologyTester');
        this.socket = null;
        this.isConnected = false;
        this.service = null;  // Se inicializar√° despu√©s de la conexi√≥n
        this.unsubscribe = null;
        this.onConnectionChange = null;
        this.onSearchResult = null;
        this.onError = null;
    }

    async connect() {
        try {
            if (this.socket?.connected) {
                console.log('üîå Ya conectado al servidor');
                return;
            }

            console.log('üîå Conectando al servidor...');
            this.socket = io('http://localhost:5001', {
                transports: ['websocket']
            });

            // Asignar socket a window para que otros servicios lo usen
            window.socket = this.socket;

            this.socket.on('connect', () => {
                console.log('‚úÖ Conectado al servidor');
                this.isConnected = true;
                this.onConnectionChange?.(true);
                this.initialize();  // Inicializar service despu√©s de conectar
            });

            this.socket.on('disconnect', () => {
                console.log('‚ùå Desconectado del servidor');
                this.isConnected = false;
                this.onConnectionChange?.(false);
            });

            this.socket.on('connect_error', (error) => {
                console.error('‚ùå Error de conexi√≥n:', error);
                this.isConnected = false;
                this.onConnectionChange?.(false);
            });

        } catch (error) {
            console.error('‚ùå Error estableciendo conexi√≥n:', error);
            this.onError?.(error);
        }
    }

    async initialize() {
        try {
            console.log('üîÑ Iniciando inicializaci√≥n del tester');
            
            // Importar din√°micamente el servicio con la ruta correcta
            const { ontologyService } = await import('/static/js/services/ontology.service.js');
            this.service = ontologyService;

            // Suscribirse a actualizaciones
            this.unsubscribe = this.service.addListener((response) => {
                console.log('üì© Tester recibi√≥ respuesta:', response);
                
                if (response.status === 'success') {
                    console.log('‚úÖ Respuesta v√°lida, datos:', response.response);
                    this.onSearchResult?.(response.response);
                } else {
                    console.error('‚ùå Error en respuesta:', response.message);
                    this.onError?.(new Error(response.message));
                }
            });

            console.log('‚úÖ Tester inicializado correctamente');
        } catch (error) {
            console.error('‚ùå Error inicializando tester:', error);
            this.onError?.(error);
        }
    }

    async search(query) {
        try {
            if (!this.isConnected) {
                throw new Error('No hay conexi√≥n con el servidor');
            }

            console.log('üîç Tester: Iniciando b√∫squeda:', query);
            await this.service.search(query);
            console.log('‚úÖ Tester: B√∫squeda enviada');
        } catch (error) {
            console.error('‚ùå Tester: Error en b√∫squeda:', error);
            this.onError?.(error);
        }
    }

    disconnect() {
        console.log('üßπ Tester: Limpiando recursos');
        if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = null;
        }
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
        }
        this.service = null;
    }
} 